// 所有引用库的版本都需要在这里面定义，统一版本
//每个引用库需注明以下信息：1、功能简介；2、引用（下载地址）
/**
 * introduction：
 *
 * reference：
 */

static def addRepos(RepositoryHandler handler) {
    handler.google()
    handler.jcenter()
    handler.mavenCentral()
    //Add the JitPack repository
    handler.maven { url "https://jitpack.io" }
    handler.maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
}
ext.addRepos = this.&addRepos

def versions = [:]
/**
 * introduction：gradle插件
 *
 * reference：https://developer.android.google.cn/studio/known-issues?hl=zh_cn
 */
versions.android_gradle_build_tools = "3.5.2"

/**
 * introduction：Kotlin语言支持
 *
 * reference：https://developer.android.google.cn/studio/projects/add-kotlin?hl=zh_cn
 */
versions.kotlin = "1.3.50"
versions.androidx_ktx = "1.1.0"

/**
 * introduction：项目SDK平台版本
 *
 * reference：https://developer.android.google.cn/studio/releases/platforms?hl=zh_cn
 */
versions.compile_sdk_version = 29
versions.build_tools_version = "29.0.2"
versions.min_sdk_version = 15
versions.target_sdk_version = 28

/**
 * introduction：Androidx兼容库
 *
 * reference：https://developer.android.google.cn/jetpack/androidx/releases/appcompat?hl=en
 */
versions.androidx_appcompat = "1.1.0"

/**
 * introduction：约束布局
 *
 * reference：https://developer.android.google.cn/jetpack/androidx/releases/constraintlayout?hl=en
 */
versions.androidx_constraintlayout = "1.1.3"

/**
 * introduction：material design
 *
 * reference：https://developer.android.google.cn/guide/topics/ui/look-and-feel?hl=en
 */
versions.material = "1.0.0"

/**
 * introduction：The AndroidJUnitRunner class is a JUnit test runner that lets you run JUnit 3- or JUnit 4-style test classes on Android devices,
 * including those using the Espresso and UI Automator testing frameworks.
 *
 * reference：https://developer.android.google.cn/training/testing/junit-runner?hl=en
 */
versions.test_junit = "4.12"

/**
 * introduction：单元测试扩展库
 *
 * reference：https://developer.android.google.cn/training/testing/junit-runner?hl=en
 */
versions.androidx_test_ext_junit = "1.1.1"

/**
 * introduction：UI 测试框架
 *
 * reference：https://developer.android.google.cn/reference/android/support/test/espresso/Espresso
 */
versions.androidx_test_espresso = "3.2.0"

/**
 * introduction：矢量图
 *
 * reference：https://developer.android.google.cn/jetpack/androidx/releases/vectordrawable
 */
versions.androidx_vectordrawable = "1.1.0"

/**
 * introduction：To add a dependency on Futures, you must add the Google Maven repository to your project. Read Google's Maven repository for more information.
 *
 * reference：https://developer.android.google.cn/jetpack/androidx/releases/concurrent
 */
versions.androidx_futures = "1.0.0"

/**
 * introduction：Lifecycle-aware components perform actions in response to a change in the lifecycle status of another component, such as activities and fragments.
 * These components help you produce better-organized, and often lighter-weight code, that is easier to maintain. See the reference docs for more information.
 *
 * reference：https://developer.android.google.cn/jetpack/androidx/releases/lifecycle
 */
versions.androidx_lifecycle = "2.1.0"
versions.androidx_lifecycle_common_java_8 = "1.1.1"

/**
 * introduction：Navigation is a framework for navigating between 'destinations' within an Android application
 * that provides a consistent API whether destinations are implemented as Fragments, Activities, or other components.
 *
 * reference：https://developer.android.google.cn/jetpack/androidx/releases/navigation
 */
versions.androidx_nav = "2.1.0"

/**
 * introduction：The Paging Library makes it easier for you to load data gradually and gracefully within your app's RecyclerView.
 *
 * reference：https://developer.android.google.cn/jetpack/androidx/releases/paging
 */
versions.androidx_paging = "2.1.0"

/**
 * introduction：The Room persistence library provides an abstraction layer over SQLite to allow for more robust database access while harnessing the full power of SQLite.
 *
 * reference：https://developer.android.google.cn/jetpack/androidx/releases/room
 */
versions.androidx_room = "2.2.1"

/**
 * introduction：The WorkManager API makes it easy to schedule deferrable, asynchronous tasks that must be run reliably .
 * These APIs let you create a task and hand it off to WorkManager to run when the work constraints are met.
 *
 * reference：https://developer.android.google.cn/jetpack/androidx/releases/work
 */
versions.androidx_work = "2.2.0"

/**
 * introduction：一个用于帮助 Android App 进行组件化改造的框架 —— 支持模块间的路由、通信、解耦。
 *
 * reference：https://github.com/alibaba/ARouter
 */
versions.arouter_api = "1.5.0"
versions.arouter_compiler = "1.2.2"
versions.arouter_register = "1.0.2"

ext.versions = versions

